[{"F:\\eclipse-workplace\\react-player\\src\\index.js":"1","F:\\eclipse-workplace\\react-player\\src\\App.js":"2","F:\\eclipse-workplace\\react-player\\src\\reportWebVitals.js":"3","F:\\eclipse-workplace\\react-player\\src\\components\\Song.js":"4","F:\\eclipse-workplace\\react-player\\src\\components\\Player.js":"5","F:\\eclipse-workplace\\react-player\\src\\data.js":"6","F:\\eclipse-workplace\\react-player\\src\\components\\Library.js":"7","F:\\eclipse-workplace\\react-player\\src\\components\\LibrarySong.js":"8","F:\\eclipse-workplace\\react-player\\src\\components\\Nav.js":"9"},{"size":478,"mtime":1612504730067,"results":"10","hashOfConfig":"11"},{"size":1078,"mtime":1614092213891,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":272,"mtime":1612791337268,"results":"14","hashOfConfig":"11"},{"size":4144,"mtime":1614057808903,"results":"15","hashOfConfig":"11"},{"size":2544,"mtime":1614094860366,"results":"16","hashOfConfig":"11"},{"size":473,"mtime":1613668102365,"results":"17","hashOfConfig":"11"},{"size":664,"mtime":1613920763171,"results":"18","hashOfConfig":"11"},{"size":465,"mtime":1613716313355,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"y6k94s",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"F:\\eclipse-workplace\\react-player\\src\\index.js",[],["40","41"],"F:\\eclipse-workplace\\react-player\\src\\App.js",[],"F:\\eclipse-workplace\\react-player\\src\\reportWebVitals.js",[],"F:\\eclipse-workplace\\react-player\\src\\components\\Song.js",[],"F:\\eclipse-workplace\\react-player\\src\\components\\Player.js",["42"],"import { useRef, useState, useEffect } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faPlay,\r\n  faAngleLeft,\r\n  faAngleRight,\r\n  faPause,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Player = ({\r\n  songs,\r\n  setCurrentSong,\r\n  currentSong,\r\n  isPlaying,\r\n  setIsPlaying,\r\n  setSongs\r\n}) => {\r\n  // Ref\r\n  const audioRef = useRef(null);\r\n  //useEffect\r\n  useEffect(() => {\r\n    (async () => {\r\n      const updatedSong = songs.map(song=>{\r\n        return{\r\n          ...song,\r\n          active:song.id===currentSong.id,\r\n        }\r\n      });\r\n      await setSongs(updatedSong);\r\n      if (isPlaying){ await audioRef.current.play()};\r\n    })();\r\n  }, [currentSong]);\r\n\r\n  // State\r\n  const [timeStamp, setTimeStamp] = useState({\r\n    duration: 0,\r\n    currentTime: 0,\r\n    percentage:0,\r\n  });\r\n\r\n  // style changing\r\n  // slider-percentage(style) changing\r\n  const sliderAnimat = {\r\n    transform:`translateX(${timeStamp.percentage}%)`,\r\n  };\r\n\r\n  const trackColor = {\r\n    background:`linear-gradient(to right, ${currentSong.color[0]},${currentSong.color[1]})`,\r\n  }\r\n\r\n  // Event Handlers\r\n  // play/pause button\r\n  const playHandler = () => {\r\n    if (!isPlaying) {\r\n      audioRef.current.play();\r\n      setIsPlaying(!isPlaying);\r\n    } else {\r\n      audioRef.current.pause();\r\n      setIsPlaying(!isPlaying);\r\n    }\r\n  };\r\n  // time changing\r\n  const updateTime = (e) => {\r\n    const duration = e.target.duration;\r\n    const currentTime = e.target.currentTime;\r\n    const percentage = Math.round((currentTime/duration)*100);\r\n    setTimeStamp({ duration, currentTime,percentage });\r\n  };\r\n  // slider changing\r\n  const dragSlider = (e) => {\r\n    audioRef.current.currentTime = e.target.value;\r\n    setTimeStamp({ ...timeStamp, currentTime: e.target.value });\r\n  };\r\n  // skip button handler\r\n  const skipHandler = (options) => {\r\n    // as song and currentSong are not refering to the same object\r\n    // they cannot be matched, we have to compare their attributes(e.g id)\r\n    let index = songs.findIndex((song) => song.id === currentSong.id);\r\n    if (options === \"forward\") {\r\n      setCurrentSong(songs[(index + 1) % songs.length] || songs[0]);\r\n    } else if (options === \"backward\") {\r\n      setCurrentSong(\r\n        songs[(index - 1) % songs.length] || songs[songs.length - 1]\r\n      );\r\n    }\r\n  };\r\n  const goNext = ()=>{\r\n    let index = songs.findIndex((song) => song.id === currentSong.id);\r\n    setCurrentSong(songs[(index + 1) % songs.length] || songs[0]);\r\n  }\r\n  // time format\r\n  const formatedTime = (second) => {\r\n    const format =\r\n      parseInt(second / 60) + \":\" + (\"0\" + Math.floor(second % 60)).slice(-2);\r\n    return format;\r\n  };\r\n  return (\r\n    <div className=\"player\">\r\n      <div className=\"time-control\">\r\n        <p>{formatedTime(timeStamp.currentTime)}</p>\r\n        <div style ={trackColor} className='track'>\r\n          <input\r\n          min={0}\r\n          max={timeStamp.duration || 0}\r\n          value={timeStamp.currentTime}\r\n          onChange={dragSlider}\r\n          type=\"range\"\r\n          />\r\n          <div style={sliderAnimat} className='animation-track'></div>\r\n        </div>\r\n        <p>{timeStamp.duration ? formatedTime(timeStamp.duration) : \"0:00\"}</p>\r\n      </div>\r\n      <div className=\"play-control\">\r\n        <FontAwesomeIcon\r\n          onClick={() => skipHandler(\"backward\")}\r\n          className=\"skip-back\"\r\n          icon={faAngleLeft}\r\n        />\r\n        <FontAwesomeIcon\r\n          onClick={playHandler}\r\n          className=\"play\"\r\n          icon={!isPlaying ? faPlay : faPause}\r\n        />\r\n        <FontAwesomeIcon\r\n          onClick={() => skipHandler(\"forward\")}\r\n          className=\"skip-forward\"\r\n          icon={faAngleRight}\r\n        />\r\n        {/* onTimeUpdate: when the audio change its time\r\n        onLoadedMetadata: after the audio loaded src */}\r\n        <audio\r\n          onLoadedMetadata={updateTime}\r\n          onTimeUpdate={updateTime}\r\n          onEnded={goNext}\r\n          ref={audioRef}\r\n          src={currentSong.audio}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n","F:\\eclipse-workplace\\react-player\\src\\data.js",[],"F:\\eclipse-workplace\\react-player\\src\\components\\Library.js",[],"F:\\eclipse-workplace\\react-player\\src\\components\\LibrarySong.js",[],"F:\\eclipse-workplace\\react-player\\src\\components\\Nav.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":32,"column":6,"nodeType":"49","endLine":32,"endColumn":19,"suggestions":"50"},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isPlaying', 'setSongs', and 'songs'. Either include them or remove the dependency array. If 'setSongs' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["53"],"no-global-assign","no-unsafe-negation",{"desc":"54","fix":"55"},"Update the dependencies array to be: [currentSong, isPlaying, setSongs, songs]",{"range":"56","text":"57"},[705,718],"[currentSong, isPlaying, setSongs, songs]"]